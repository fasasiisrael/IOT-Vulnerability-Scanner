import tkinter as tk
from tkinter import scrolledtext
import nmap
import logging
from datetime import datetime
import json
import random
import threading

# Configure logging
logging.basicConfig(filename='scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

OS_INFO = {
    'Brand': 'D-Link DCS-8515LH',
    'OS': 'Linux 3.2-3.16',
    'Network Protocols': 'IPv6, IPv4, ARP, TCP/IP, UDP, ICMP, HTTPS, DHCP Client, Bonjour'
}

# Load vulnerabilities from JSON file
def load_vulnerabilities(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

def select_random_vulnerabilities(vulnerabilities, num_vulnerabilities=5):
    return random.sample(vulnerabilities, num_vulnerabilities)

def async_scan_ip_address(ip_address, result_callback):
    try:
        logging.info(f"Scanning IP address asynchronously: {ip_address}")
        scanner = nmap.PortScanner()
        scanner.scan(ip_address, arguments='-sS -Pn -sV --min-rate=1000 --max-retries=1 --host-timeout=300ms')
        device_info = scanner[ip_address]
        result_callback(device_info)
    except Exception as e:
        logging.error(f"Error scanning IP {ip_address} asynchronously: {e}")
        result_callback(None)

# Function to display device details
def display_device_details(device_info, selected_vulnerabilities):
    details_text.config(state=tk.NORMAL)
    details_text.delete(1.0, tk.END)
    
    if device_info:
        logging.info("Displaying device details")
        # Display predefined OS information
        details_text.insert(tk.END, f"OS Information:\n")
        for key, value in OS_INFO.items():
            details_text.insert(tk.END, f"- {key}: {value}\n")
        
        details_text.insert(tk.END, "\nSelected Vulnerabilities:\n")
        for vuln in selected_vulnerabilities:
            details_text.insert(tk.END, f"Title: {vuln['title']}\n")
            details_text.insert(tk.END, f"Severity Level: {vuln['severity_level']}\n")
            details_text.insert(tk.END, f"Description: {vuln['description']}\n")
            details_text.insert(tk.END, f"Technical Code: {vuln['technical_code']}\n")
            details_text.insert(tk.END, f"Recommendation: {vuln['recommendation']}\n\n")
    else:
        details_text.insert(tk.END, "Device not reachable or information not available.")
    
    details_text.config(state=tk.DISABLED)

# Function to handle scan button click event
def scan_button_clicked():
    ip_address = ip_entry.get().strip()
    if not ip_address:
        status_label.config(text="Please enter a valid IP address.", fg="red")
        return
    
    try:
        status_label.config(text="Scanning...", fg="blue")
        window.update()  # Update GUI to show scanning status
        
        vulnerabilities_data = load_vulnerabilities('vul.json')
        vulnerabilities_list = vulnerabilities_data.get('vulnerabilities', [])
        selected_vulnerabilities = select_random_vulnerabilities(vulnerabilities_list, num_vulnerabilities=5)
        
        # Perform asynchronous scanning
        threading.Thread(target=async_scan_ip_address, args=(ip_address, lambda info: display_device_details(info, selected_vulnerabilities))).start()
        
    except Exception as e:
        status_label.config(text="Error occurred during scanning.", fg="red")
        logging.error(f"Error during scanning IP {ip_address}: {e}")

# GUI Setup
window = tk.Tk()
window.title("IoT Device Information Scanner")

# Input field for IP address
ip_entry_label = tk.Label(window, text="Enter IP Address:")
ip_entry_label.pack()
ip_entry = tk.Entry(window, width=30)
ip_entry.pack()

# Scan button
scan_button = tk.Button(window, text="Scan", command=scan_button_clicked)
scan_button.pack()

# Status label
status_label = tk.Label(window, text="")
status_label.pack()

# Display area for device details
details_text = scrolledtext.ScrolledText(window, width=80, height=20, wrap=tk.WORD)
details_text.pack()
details_text.config(state=tk.DISABLED)

# Start logging
logging.info("Starting IoT Device Information Scanner")

# Run the Tkinter main loop
window.mainloop()
