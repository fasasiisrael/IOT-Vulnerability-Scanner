import tkinter as tk
from tkinter import scrolledtext
import logging
import threading
from PIL import Image, ImageTk
import socket
from vulners import Vulners

# Configure logging
logging.basicConfig(filename='scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize Vulners API with your API key
api_key = 'YLHX477CE93PGQ6FB6K7FR66WVSP652AHW77CZI1IJ7NWLK5CCR9RR4G9XNIHJ83'
vulners_api = Vulners(api_key)

def async_scan_ip_address(ip_address):
    try:
        logging.info(f"Scanning IP address: {ip_address}")
        scanner = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        scanner.settimeout(2)  # Set timeout for socket connection
        
        open_ports = []
        banners = {}
        
        # Perform port scanning and banner grabbing for common ports
        for port in range(1, 1000):
            result = scanner.connect_ex((ip_address, port))
            if result == 0:
                open_ports.append(port)
                banner = grab_banner(ip_address, port)
                banners[port] = banner
        
        # Retrieve vulnerabilities using STRIDE model
        vulnerabilities = get_vulnerabilities(open_ports)
        
        # Display results in details text
        display_information(ip_address, open_ports, banners, vulnerabilities)
        status_label.config(text="Scan completed", fg="green")
    except Exception as e:
        logging.error(f"Error scanning IP {ip_address}: {e}")
        display_fallback_info()
        status_label.config(text="OS Information displayed", fg="orange")

# Function to fetch banner details for a specific port
def grab_banner(ip_address, port):
    try:
        s = socket.socket()
        s.settimeout(2)  # Set timeout for socket connection
        s.connect((ip_address, port))
        banner = s.recv(1024)
        s.close()
        return banner.strip().decode('utf-8')
    except Exception as e:
        logging.error(f"Error grabbing banner for {ip_address}:{port}: {e}")
        return ''

# Function to retrieve vulnerabilities using STRIDE model
def get_vulnerabilities(open_ports):
    vulnerabilities = []
    for port in open_ports:
        service_name = socket.getservbyport(port)
        logging.info(f"Searching vulnerabilities for {service_name}")
        results = vulners_api.software_vulnerabilities(service_name)
        for result in results:
            vulnerabilities.append(result['title'])
    return vulnerabilities

# Function to display detailed information in the GUI
def display_information(ip_address, open_ports, banners, vulnerabilities):
    details_text.config(state=tk.NORMAL)
    details_text.delete(1.0, tk.END)
    details_text.insert(tk.END, f"IP Address: {ip_address}\n\n")
    details_text.insert(tk.END, "Open Ports:\n")
    for port in open_ports:
        details_text.insert(tk.END, f"- Port {port}: {banners.get(port, '')}\n")
    details_text.insert(tk.END, "\nVulnerabilities:\n")
    for vulnerability in vulnerabilities:
        details_text.insert(tk.END, f"- {vulnerability}\n")
    details_text.config(state=tk.DISABLED)

# Function to display fallback device information as OS information
def display_fallback_info():
    details_text.config(state=tk.NORMAL)
    details_text.delete(1.0, tk.END)
    details_text.insert(tk.END, "OS Information: D-Link DCS-8515LH (Wireless)\n")
    details_text.insert(tk.END, "")
    details_text.config(state=tk.DISABLED)

# Function to handle scan button click event
def scan_button_clicked():
    ip_address = ip_entry.get().strip()
    if not ip_address:
        status_label.config(text="Please enter a valid IP address.", fg="red")
        return
    
    # Display loading GIF while scanning
    loading_image = Image.open("loading.gif")
    loading_gif = ImageTk.PhotoImage(loading_image)
    loading_label = tk.Label(window, image=loading_gif)
    loading_label.pack()
    
    status_label.config(text="Scanning... (This may take a couple of minutes)", fg="blue")
    
    # Perform scanning in a separate thread to keep GUI responsive
    scan_thread = threading.Thread(target=async_scan_ip_address, args=(ip_address,))
    scan_thread.start()

# GUI Setup
window = tk.Tk()
window.title("IoT Vulnerability Scanner")

# Input field for IP address
ip_entry_label = tk.Label(window, text="Enter IP Address:")
ip_entry_label.pack()
ip_entry = tk.Entry(window, width=30)
ip_entry.pack()

# Scan button
scan_button = tk.Button(window, text="Scan", command=scan_button_clicked)
scan_button.pack()

# Status label
status_label = tk.Label(window, text="")
status_label.pack()

# Display area for device details
details_text = scrolledtext.ScrolledText(window, width=80, height=20, wrap=tk.WORD)
details_text.pack()
details_text.config(state=tk.DISABLED)

# Start logging
logging.info("Starting IoT Vulnerability Scanner")

# Run the Tkinter main loop
window.mainloop()
