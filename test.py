import tkinter as tk
from tkinter import scrolledtext
import nmap
from vulners import Vulners
import logging
import threading
from PIL import Image, ImageTk  # Import PIL modules

# Configure logging
logging.basicConfig(filename='scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Function to perform IP address scanning asynchronously
def async_scan_ip_address(ip_address):
    try:
        logging.info(f"Scanning IP address: {ip_address}")
        scanner = nmap.PortScanner()
        # Use SYN scan (-sS) and adjust timing (-T4)
        scanner.scan(ip_address, arguments='-Pn -sS -T4')
        device_info = scanner[ip_address]
        if device_info:
            display_device_details(device_info)
            status_label.config(text="Scan completed", fg="green")
    except Exception as e:
        logging.error(f"Error scanning IP {ip_address}: {e}")
        status_label.config(text="Error occurred during scanning", fg="red")

# Function to display device details and vulnerabilities
def display_device_details(device_info):
    details_text.config(state=tk.NORMAL)
    details_text.delete(1.0, tk.END)
    
    if device_info:
        logging.info("Displaying device details")
        
        # Extract OS information
        os_info = get_os_info(device_info)
        details_text.insert(tk.END, f"OS Information: {os_info}\n\n")
        
        # Extract and display open ports
        if 'tcp' in device_info:
            details_text.insert(tk.END, "Open Ports:\n")
            for port in device_info['tcp'].keys():
                details_text.insert(tk.END, f"Port {port}: {device_info['tcp'][port]['name']}\n")
        else:
            details_text.insert(tk.END, "No open ports found.\n")
        
        # Fetch and display vulnerabilities based on OS family
        if 'osclass' in device_info:
            os_family = device_info['osclass'][0]['osfamily']
            vulnerabilities = Vulners().osvdb(os_family)
            details_text.insert(tk.END, "\nVulnerabilities:\n")
            if vulnerabilities:
                for vuln in vulnerabilities:
                    details_text.insert(tk.END, f"- {vuln}\n")
            else:
                details_text.insert(tk.END, "No vulnerabilities found.\n")
        else:
            details_text.insert(tk.END, "OS information not available for vulnerability lookup.\n")
    else:
        details_text.insert(tk.END, "Device not reachable or information not available.\n")
    
    details_text.config(state=tk.DISABLED)

# Function to extract OS information
def get_os_info(device_info):
    os_info = "Unknown"
    if 'osclass' in device_info:
        os_info = device_info['osclass'][0]['osfamily']
    elif 'osmatch' in device_info:
        os_info = device_info['osmatch'][0]['name']
    return os_info

# Function to handle scan button click event
def scan_button_clicked():
    ip_address = ip_entry.get().strip()
    if not ip_address:
        status_label.config(text="Please enter a valid IP address.", fg="red")
        return
    
    # Display loading GIF while scanning
    loading_image = Image.open("loading.gif")  # Replace "loading.gif" with your own GIF file path
    loading_gif = ImageTk.PhotoImage(loading_image)
    loading_label = tk.Label(window, image=loading_gif)
    loading_label.pack()
    
    status_label.config(text="Scanning... (This may take a couple of minutes)", fg="blue")
    
    # Perform scanning in a separate thread to keep GUI responsive
    scan_thread = threading.Thread(target=async_scan_ip_address, args=(ip_address,))
    scan_thread.start()

# GUI Setup
window = tk.Tk()
window.title("IoT Vulnerability Scanner")

# Input field for IP address
ip_entry_label = tk.Label(window, text="Enter IP Address:")
ip_entry_label.pack()
ip_entry = tk.Entry(window, width=30)
ip_entry.pack()

# Scan button
scan_button = tk.Button(window, text="Scan", command=scan_button_clicked)
scan_button.pack()

# Status label
status_label = tk.Label(window, text="")
status_label.pack()

# Display area for device details
details_text = scrolledtext.ScrolledText(window, width=60, height=20, wrap=tk.WORD)
details_text.pack()
details_text.config(state=tk.DISABLED)

# Start logging
logging.info("Starting IoT Vulnerability Scanner")

# Run the Tkinter main loop
window.mainloop()
