import tkinter as tk
from tkinter import scrolledtext
import nmap
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(filename='scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

#  OS information for the specific IoT device
OS_INFO = {
    'Brand': 'D-Link DCS-8515LH',
    'OS': 'Linux 3.2-3.16',
    'Network Protocols': 'IPv6, IPv4, ARP, TCP/IP, UDP, ICMP, HTTPS, DHCP Client, Bonjour'
}

# Function to perform IP address scanning synchronously
def sync_scan_ip_address(ip_address):
    try:
        logging.info(f"Scanning IP address: {ip_address}")
        start_time = datetime.now()
        scanner = nmap.PortScanner()
        # Perform a TCP SYN scan (-sS) with no ping (-Pn) and service version detection (-sV)
        scanner.scan(ip_address, arguments='-sS -Pn -sV')
        end_time = datetime.now()
        latency = (end_time - start_time).total_seconds() * 1000  # Calculate latency in milliseconds

        return scanner[ip_address], latency
    except Exception as e:
        logging.error(f"Error scanning IP {ip_address}: {e}")
        return None, None

# Function to display device details
def display_device_details(device_info, latency):
    details_text.config(state=tk.NORMAL)
    details_text.delete(1.0, tk.END)
    
    if device_info:
        logging.info("Displaying device details")
        
        details_text.insert(tk.END, f"OS Information:\n")
        for key, value in OS_INFO.items():
            details_text.insert(tk.END, f"- {key}: {value}\n")
        
        details_text.insert(tk.END, f"Network Latency: {latency:.2f} ms\n\n")
        
        details_text.insert(tk.END, "Open Ports:\n")
        for port in device_info['tcp'].keys():
            service = device_info['tcp'][port]['name'] if 'name' in device_info['tcp'][port] else 'Unknown'
            details_text.insert(tk.END, f"Port {port}: {service}\n")
    else:
        details_text.insert(tk.END, "Device not reachable or information not available.")
    
    details_text.config(state=tk.DISABLED)

# Function to handle scan button click event
def scan_button_clicked():
    ip_address = ip_entry.get().strip()
    if not ip_address:
        status_label.config(text="Please enter a valid IP address.", fg="red")
        return
    
    try:
        status_label.config(text="Scanning...", fg="blue")
        window.update()  # Update GUI to show scanning status
        
        device_info, latency = sync_scan_ip_address(ip_address)
        
        if device_info:
            display_device_details(device_info, latency)
            status_label.config(text="Scan successful", fg="green")
        else:
            status_label.config(text="No device information found", fg="red")
    except Exception as e:
        status_label.config(text="Error occurred during scanning.", fg="red")
        logging.error(f"Error during scanning IP {ip_address}: {e}")

# GUI Setup
window = tk.Tk()
window.title("IoT Device Information Scanner")

# Input field for IP address
ip_entry_label = tk.Label(window, text="Enter IP Address:")
ip_entry_label.pack()
ip_entry = tk.Entry(window, width=30)
ip_entry.pack()

# Scan button
scan_button = tk.Button(window, text="Scan", command=scan_button_clicked)
scan_button.pack()

# Status label
status_label = tk.Label(window, text="")
status_label.pack()

# Display area for device details
details_text = scrolledtext.ScrolledText(window, width=60, height=20, wrap=tk.WORD)
details_text.pack()
details_text.config(state=tk.DISABLED)

# Start logging
logging.info("Starting IoT Device Information Scanner")

# Run the Tkinter main loop
window.mainloop()
